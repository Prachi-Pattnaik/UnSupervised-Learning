# -*- coding: utf-8 -*-
"""Unsupervised new.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ocDppf41XS1dDR7LnvrVwJ2W_iOVtwiu

# Upload Data and understanding the data
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
import warnings
warnings.filterwarnings("ignore")

# Reading File
df= pd.read_csv("/prachi/Country-data.csv")
df.head()

# Converting exports,health,imports in actual values as its given as %age of the GDP per capita
features_std =['exports','health','imports']
for i in features_std:
    df[i]=(df[i]*df['gdpp'])/100

df.head()

df.shape

# Column Type in dataframe
df.info()

# continuous variables
df.describe()

#correlation using heatmap
plt.figure(figsize=(20, 10))
sns.heatmap(df.corr(),annot=True)

"""# Data Visualisation"""

# distribution wrt income
features = ['child_mort','exports','health','imports','inflation','life_expec','total_fer','gdpp']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.scatterplot(x='income',y=df[i[1]], data=df)

#distribution wrt gdpp
features = ['child_mort','exports','health','imports','income','inflation','life_expec','total_fer']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.scatterplot(x='gdpp',y=df[i[1]], data=df)

# Distribution wrt child mortality
features = ['exports','health','imports','income','inflation','life_expec','total_fer','gdpp']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.scatterplot(x='child_mort',y=df[i[1]], data=df)

"""# Outlier Analysis"""

# Checking the outlier
fig, axs = plt.subplots(3,3, figsize = (15,7.5))
plt1 = sns.boxplot(df['child_mort'], ax = axs[0,0])
plt2 = sns.boxplot(df['health'], ax = axs[0,1])
plt3 = sns.boxplot(df['life_expec'], ax = axs[0,2])
plt4 = sns.boxplot(df['total_fer'], ax = axs[1,0])
plt5 = sns.boxplot(df['income'], ax = axs[1,1])
plt6 = sns.boxplot(df['inflation'], ax = axs[1,2])
plt7 = sns.boxplot(df['gdpp'], ax = axs[2,0])
plt8 = sns.boxplot(df['imports'], ax = axs[2,1])
plt9 = sns.boxplot(df['exports'], ax = axs[2,2])
plt.tight_layout()

# Removing the outliers
# Caping child_mort lower outliers and keeping Higher as it will be helpful in clustering more child_mort means country is in need of help
q1 = df['child_mort'].quantile(0.01)
df['child_mort'][df['child_mort']<= q1] = q1

# Caping highier outlier for other variables
q3_exports = df['exports'].quantile(0.99)
df['exports'][df['exports']>= q3_exports] = q3_exports

q3_imports = df['imports'].quantile(0.99)
df['imports'][df['imports']>= q3_imports] = q3_imports

q3_health = df['health'].quantile(0.99)
df['health'][df['health']>= q3_health] = q3_health

q3_gdpp = df['gdpp'].quantile(0.99)
df['gdpp'][df['gdpp']>= q3_gdpp] = q3_gdpp

q3_life_expec = df['life_expec'].quantile(0.99)
df['life_expec'][df['life_expec']>= q3_life_expec] = q3_life_expec

q3_income = df['income'].quantile(0.99)
df['income'][df['income']>= q3_income] = q3_income

q3_inflation = df['inflation'].quantile(0.99)
df['inflation'][df['inflation']>= q3_inflation] = q3_inflation

q3_total_fer = df['total_fer'].quantile(0.99)
df['total_fer'][df['total_fer']>= q3_total_fer] = q3_total_fer

# Checking data after removal of outlier
df.describe()

# Visualising univatriate after outlier removal
features = df.columns[1:]
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.boxplot(df[i[1]])

#Visualising using pair plot
fig = plt.figure(figsize=(20,35))
sns.pairplot(df,diag_kind='kde',corner=True)

"""
# K Mean Clustering

"""

#Scaling using MinMaxScaling
from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
df1= df.drop('country', axis=1)
df1 = scaler.fit_transform(df1)

df1 = pd.DataFrame(df1)
df1.columns = df.columns[1:]
df1.head()

# Elbow Curve
from sklearn.cluster import KMeans
ssd = []
for k in range(2, 11):
    kmean = KMeans(n_clusters = k).fit(df1)
    ssd.append([k, kmean.inertia_])
    
plt.plot(pd.DataFrame(ssd)[0], pd.DataFrame(ssd)[1])

# K=3 taking 3 cluster
kmean = KMeans(n_clusters = 3, random_state = 50)
kmean.fit(df1)

kmean.labels_

label = pd.DataFrame(kmean.labels_, columns = ['label'])

df.kmean = df.copy()

df.kmean = pd.concat([df.kmean, label ], axis =1)

df.kmean.head()

# Datapoints we have in each cluster
df.kmean.label.value_counts()

df.kmean.shape

#Cluster visualisation for Child Mortality
features = ['exports','health','imports','income','inflation','life_expec','total_fer','gdpp']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.scatterplot(x='child_mort',y=df[i[1]], hue = 'label', data = df.kmean, palette = 'Set1')

features = ['exports','health','imports','income','inflation','life_expec','total_fer','gdpp','child_mort']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.barplot(x='label', y=df[i[1]], data=df.kmean)

df.kmean.drop(['country'], axis = 1).groupby('label').mean().plot(figsize=(20,12),kind = 'bar')
plt.yscale('log')
plt.show()

"""# Hierarchical Clustering"""

from scipy.cluster.hierarchy import linkage
from scipy.cluster.hierarchy import dendrogram
from scipy.cluster.hierarchy import cut_tree
df1=df.drop('country',axis=1)
#method as single
mergings = linkage(df1, method="single", metric='euclidean')
dendrogram(mergings)
plt.show()

# method as complete
plt.figure(figsize= (18,7))
mergings = linkage(df1, method="complete", metric='euclidean')
dendrogram(mergings)
plt.show()

cluster_labels = cut_tree(mergings, n_clusters=3).reshape(-1, )
cluster_labels

df.hier = df.copy()

df.hier['label'] = cluster_labels
df.hier.head()

# number of datapoints in each cluster
df.hier.label.value_counts()

#visualisation of clusters based on child mortality
features = ['exports','health','imports','income','inflation','life_expec','total_fer','gdpp']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.scatterplot(x='child_mort',y=df[i[1]], hue = 'label', data = df.hier, palette = 'Set1')

features = ['exports','health','imports','income','inflation','life_expec','total_fer','gdpp','child_mort']
plt.figure(figsize = (20,12))
for i in enumerate(features):
    plt.subplot(3,3,i[0]+1)
    sns.barplot(x='label', y=df[i[1]], data=df.hier)

df.hier.drop(['country'], axis = 1).groupby('label').mean().plot(figsize=(20,12),kind = 'bar')
plt.yscale('log')
plt.show()

